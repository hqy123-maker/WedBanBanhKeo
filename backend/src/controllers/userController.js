import pool from "../config/db.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
// üìå L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (Ch·ªâ Admin)
export const getUsers = async (req, res) => {
  try {
    const [users] = await pool.query(`
      SELECT id, name, email, role FROM users 
    `);
    res.json(users);
  } catch (error) {
    console.error(" L·ªói l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", error);
    res.status(500).json({ message: "L·ªói l·∫•y danh s√°ch ng∆∞·ªùi d√πng" });
  }
};
export const registerUser = async (req, res) => {
  try {
    let { name, email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: "Email v√† m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" });
    }

    // N·∫øu name kh√¥ng ƒë∆∞·ª£c cung c·∫•p, ƒë·∫∑t th√†nh NULL
    if (!name) {
      name = null;
    }

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const [existingUser] = await pool.query("SELECT id FROM users WHERE email = ?", [email]);
    if (existingUser.length > 0) {
      return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);

    // Th√™m user v√†o database
    await pool.query(
      "INSERT INTO users (name, email, password, role) VALUES (?, ?, ?, 'user')",
      [name, email, hashedPassword]
    );

    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" });
  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω ng∆∞·ªùi d√πng:", error);
    res.status(500).json({ message: "L·ªói server, ki·ªÉm tra l·∫°i backend!" });
  }
};

// üìå L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID (Ch·ªâ Admin ho·∫∑c ch√≠nh ch·ªß)
export const getUserById = async (req, res) => {
  try {
    const userId = req.user?.id;
    const isAdmin = req.user?.role === "admin";

    if (!isAdmin && userId != req.params.id) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem th√¥ng tin ng∆∞·ªùi kh√°c" });
    }

    const [users] = await pool.query(`
      SELECT id, name, email, role FROM users WHERE id = ?
    `, [req.params.id]);

    if (users.length === 0) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    res.json(users[0]);
  } catch (error) {
    console.error(" L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
    res.status(500).json({ message: "L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng" });
  }
};

// üìå X√≥a ng∆∞·ªùi d√πng (Kh√¥ng cho ph√©p x√≥a admin)
export const deleteUser = async (req, res) => {
  try {
    const { id } = req.params;

    // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i kh√¥ng
    const [users] = await pool.query(`
      SELECT role FROM users WHERE id = ?
    `, [id]);

    if (users.length === 0) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    if (users[0].role === "admin") {
      return res.status(403).json({ message: "Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n admin" });
    }

    await pool.query(`
      DELETE FROM users WHERE id = ?
    `, [id]);

    res.json({ message: "X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng" });
  } catch (error) {
    console.error(" L·ªói x√≥a ng∆∞·ªùi d√πng:", error);
    res.status(500).json({ message: "L·ªói x√≥a ng∆∞·ªùi d√πng" });
  }
};


// üìå C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (Ch√≠nh ch·ªß ho·∫∑c Admin)
export const updateUser = async (req, res) => {
  try {
    const userId = req.user?.id;
    const isAdmin = req.user?.role === "admin";
    const { id } = req.params;
    const { name, email, password, role } = req.body;

    // üìå Ng∆∞·ªùi d√πng ch·ªâ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ch√≠nh h·ªç, Admin c√≥ th·ªÉ c·∫≠p nh·∫≠t t·∫•t c·∫£
    if (!isAdmin && userId != id) {
      return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi kh√°c" });
    }

    // üìå Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a (tr√°nh tr√πng email)
    if (email) {
      const [existingUser] = await pool.query(`
        SELECT id FROM users WHERE email = ? AND id != ?
      `, [email, id]);

      if (existingUser.length > 0) {
        return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
      }
    }

    // üìå M√£ h√≥a m·∫≠t kh·∫©u n·∫øu c√≥ thay ƒë·ªïi
    let hashedPassword = null;
    if (password) {
      hashedPassword = await bcrypt.hash(password, 10);
    }

    // üìå Ch·ªâ admin m·ªõi c√≥ quy·ªÅn c·∫≠p nh·∫≠t role
    let query = "UPDATE users SET name = ?, email = ?";
    let params = [name, email];

    if (hashedPassword) {
      query += ", password = ?";
      params.push(hashedPassword);
    }

    if (isAdmin && role) {
      query += ", role = ?";
      params.push(role);
    }

    query += " WHERE id = ?";
    params.push(id);

    const [result] = await pool.query(query, params);

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    res.json({ message: "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng" });
  } catch (error) {
    console.error(" L·ªói c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", error);
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng" });
  }
};
// ƒêƒÉng nh·∫≠p
export const loginUser = async (req, res) => {
  const { email, password } = req.body;

  try {
    // T√¨m ng∆∞·ªùi d√πng theo email
    const [rows] = await pool.query("SELECT * FROM users WHERE email = ?", [email]);

    if (rows.length === 0) {
      return res.status(404).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!" });
    }

    const user = rows[0];

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Sai email ho·∫∑c m·∫≠t kh·∫©u!" });
    }

    // T·∫°o token JWT
    const token = jwt.sign({ id: user.id, email: user.email, role: user.role }, "SECRET_KEY", { expiresIn: "1h" });

    // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng
    res.json({
      id: user.id,
      email: user.email,
      name: user.name,
      role: user.role,
      token
    });
  } catch (error) {
    console.error("L·ªói ƒëƒÉng nh·∫≠p:", error);
    res.status(500).json({ message: "L·ªói server!" });
  }
};
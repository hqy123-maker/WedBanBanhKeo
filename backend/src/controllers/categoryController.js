import pool from "../config/db.js";

// üìå L·∫•y danh s√°ch t·∫•t c·∫£ danh m·ª•c (H·ªó tr·ª£ ph√¢n trang)
export const getCategories = async (req, res) => {
  try {
    const { page = 1, limit = 10 } = req.query;
    const offset = (page - 1) * limit;

    const [categories] = await pool.query(`
      SELECT * FROM categories 
      ORDER BY name ASC
      LIMIT ? OFFSET ?
    `, [parseInt(limit), parseInt(offset)]);

    res.json(categories);
  } catch (error) {
    console.error(" L·ªói l·∫•y danh m·ª•c:", error);
    res.status(500).json({ message: "L·ªói l·∫•y danh m·ª•c" });
  }
};

// üìå L·∫•y danh m·ª•c theo ID
export const getCategoryById = async (req, res) => {
  try {
    const [categories] = await pool.query(`
      SELECT * FROM categories WHERE id = ?
    `, [req.params.id]);

    if (categories.length === 0) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c" });

    res.json(categories[0]);
  } catch (error) {
    console.error(" L·ªói l·∫•y danh m·ª•c:", error);
    res.status(500).json({ message: "L·ªói l·∫•y danh m·ª•c" });
  }
};

// üìå Th√™m danh m·ª•c (Ki·ªÉm tra tr√πng t√™n)
export const addCategory = async (req, res) => {
  const { name } = req.body;
  if (!name) return res.status(400).json({ message: "T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });

  try {
    const [existingCategory] = await pool.query(`
      SELECT id FROM categories WHERE name = ?
    `, [name]);

    if (existingCategory.length > 0) {
      return res.status(400).json({ message: "Danh m·ª•c n√†y ƒë√£ t·ªìn t·∫°i" });
    }

    await pool.query(`
      INSERT INTO categories (name) VALUES (?)
    `, [name]);

    res.status(201).json({ message: "Th√™m danh m·ª•c th√†nh c√¥ng" });
  } catch (error) {
    console.error(" L·ªói th√™m danh m·ª•c:", error);
    res.status(500).json({ message: "L·ªói th√™m danh m·ª•c" });
  }
};

// üìå C·∫≠p nh·∫≠t danh m·ª•c (Ki·ªÉm tra tr√πng t√™n)
export const updateCategory = async (req, res) => {
  const { name } = req.body;
  if (!name) return res.status(400).json({ message: "T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });

  try {
    const [existingCategory] = await pool.query(`
      SELECT id FROM categories WHERE name = ? AND id != ?
    `, [name, req.params.id]);

    if (existingCategory.length > 0) {
      return res.status(400).json({ message: "Danh m·ª•c n√†y ƒë√£ t·ªìn t·∫°i" });
    }

    const [result] = await pool.query(`
      UPDATE categories SET name=? WHERE id=?
    `, [name, req.params.id]);

    if (result.affectedRows === 0) return res.status(404).json({ message: "Danh m·ª•c kh√¥ng t·ªìn t·∫°i" });

    res.json({ message: "C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng" });
  } catch (error) {
    console.error(" L·ªói c·∫≠p nh·∫≠t danh m·ª•c:", error);
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t danh m·ª•c" });
  }
};

// üìå X√≥a danh m·ª•c (Ch·∫∑n x√≥a n·∫øu c√≥ s·∫£n ph·∫©m thu·ªôc danh m·ª•c)
export const deleteCategory = async (req, res) => {
  try {
    const categoryId = req.params.id;

    // Ki·ªÉm tra danh m·ª•c c√≥ s·∫£n ph·∫©m kh√¥ng
    const [[{ productCount }]] = await pool.query(`
      SELECT COUNT(*) AS productCount FROM products WHERE category_id = ?
    `, [categoryId]);

    if (productCount > 0) {
      return res.status(400).json({ message: "Kh√¥ng th·ªÉ x√≥a danh m·ª•c c√≥ s·∫£n ph·∫©m" });
    }

    const [result] = await pool.query(`
      DELETE FROM categories WHERE id = ?
    `, [categoryId]);

    if (result.affectedRows === 0) return res.status(404).json({ message: "Danh m·ª•c kh√¥ng t·ªìn t·∫°i" });

    res.json({ message: "X√≥a danh m·ª•c th√†nh c√¥ng" });
  } catch (error) {
    console.error(" L·ªói x√≥a danh m·ª•c:", error);
    res.status(500).json({ message: "L·ªói x√≥a danh m·ª•c" });
  }
};

import pool from "../config/db.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

// üìå ƒêƒÉng k√Ω t√†i kho·∫£n
export const register = async (req, res) => {
  const { name, email, password } = req.body;

  try {
    if (!name || !email || !password) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng email h·ª£p l·ªá
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ message: "Email kh√¥ng h·ª£p l·ªá" });
    }

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const [existingUser] = await pool.query("SELECT id FROM users WHERE email = ?", [email]);
    if (existingUser.length > 0) {
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u an to√†n h∆°n
    const hashedPassword = await bcrypt.hash(password, 12);

    // Th√™m user m·ªõi
    await pool.query("INSERT INTO users (name, email, password, role) VALUES (?, ?, ?, 'user')", 
      [name, email, hashedPassword]);

    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng" });
  } catch (error) {
    console.error(" L·ªói ƒëƒÉng k√Ω:", error);
    res.status(500).json({ message: "L·ªói ƒëƒÉng k√Ω" });
  }
};

// üìå ƒêƒÉng nh·∫≠p
export const login = async (req, res) => {
  const { email, password } = req.body;

  try {
    // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
    const [users] = await pool.query("SELECT id, name, email, password, role FROM users WHERE email = ?", [email]);
    if (users.length === 0) return res.status(401).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });

    const user = users[0];

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(401).json({ message: "Sai m·∫≠t kh·∫©u" });

    // T·∫°o JWT token
    const token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET, { expiresIn: "1d" });

    res.json({ 
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", 
      token, 
      user: { id: user.id, name: user.name, email: user.email, role: user.role }
    });
  } catch (error) {
    console.error(" L·ªói ƒëƒÉng nh·∫≠p:", error);
    res.status(500).json({ message: "L·ªói ƒëƒÉng nh·∫≠p" });
  }
};

// üìå ƒêƒÉng xu·∫•t
export const logout = async (req, res) => {
  try {
    res.json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" });
  } catch (error) {
    console.error(" L·ªói ƒëƒÉng xu·∫•t:", error);
    res.status(500).json({ message: "L·ªói ƒëƒÉng xu·∫•t" });
  }
};

// üìå L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
export const getUserProfile = async (req, res) => {
  try {
    const userId = req.user?.id;

    // L·∫•y th√¥ng tin user t·ª´ database
    const [users] = await pool.query("SELECT id, name, email, role FROM users WHERE id = ?", [userId]);
    if (users.length === 0) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    res.json(users[0]);
  } catch (error) {
    console.error(" L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error);
    res.status(500).json({ message: "L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng" });
  }
};
